Here is an example of how you can implement the `GetRegistrationsByStudentId` and `GetGroupsByIds` methods using a generic repository:

**IGenericRepository interface**
```
using System.Collections.Generic;
using System.Threading.Tasks;

namespace HTI.Core.Repositories
{
    public interface IGenericRepository<T> where T : class
    {
        Task<IEnumerable<T>> GetAllAsync();
        Task<T> GetByIdAsync(int id);
        Task<IEnumerable<T>> GetAsync(Expression<Func<T, bool>> predicate);
    }
}
```
**GenericRepository implementation**
```
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace HTI.Infrastructure.Repositories
{
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        private readonly DbContext _context;

        public GenericRepository(DbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _context.Set<T>().ToListAsync();
        }

        public async Task<T> GetByIdAsync(int id)
        {
            return await _context.Set<T>().FindAsync(id);
        }

        public async Task<IEnumerable<T>> GetAsync(Expression<Func<T, bool>> predicate)
        {
            return await _context.Set<T>().Where(predicate).ToListAsync();
        }
    }
}
```
**RegistrationRepository implementation**
```
using HTI.Core.Entities;
using HTI.Core.Repositories;
using System.Linq;
using System.Threading.Tasks;

namespace HTI.Infrastructure.Repositories
{
    public class RegistrationRepository : IRegistrationRepository
    {
        private readonly IGenericRepository<Registration> _registrationRepository;
        private readonly IGenericRepository<Group> _groupRepository;

        public RegistrationRepository(IGenericRepository<Registration> registrationRepository, IGenericRepository<Group> groupRepository)
        {
            _registrationRepository = registrationRepository;
            _groupRepository = groupRepository;
        }

        public async Task<IEnumerable<Registration>> GetRegistrationsByStudentId(int studentId)
        {
            return await _registrationRepository.GetAsync(r => r.StudentId == studentId && r.IsOpen == true);
        }

        public async Task<IEnumerable<Group>> GetGroupsByIds(IEnumerable<int> groupIds)
        {
            return await _groupRepository.GetAsync(g => groupIds.Contains(g.GroupId));
        }
    }
}
```
**RegistrationsController**
```
using Microsoft.AspNetCore.Mvc;
using HTI.Core.Entities;
using HTI.Core.Repositories;
using System.Threading.Tasks;

namespace HTI.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class RegistrationsController : ControllerBase
    {
        private readonly IRegistrationRepository _registrationRepository;

        public RegistrationsController(IRegistrationRepository registrationRepository)
        {
            _registrationRepository = registrationRepository;
        }

        [HttpGet("student/{studentId}")]
        public async Task<IActionResult> GetGroupsByStudentId(int studentId)
        {
            var registrations = await _registrationRepository.GetRegistrationsByStudentId(studentId);
            var groupIds = registrations.Select(r => r.GroupId).Distinct();
            var groups = await _registrationRepository.GetGroupsByIds(groupIds);

            return Ok(groups);
        }
    }
}
```
**Startup.cs (add repository and controller to DI container)**
```
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using HTI.Infrastructure.Repositories;
using HTI.Api.Controllers;

namespace HTI.Api
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<MyDbContext>(); // assume you have a DbContext class
            services.AddTransient<IGenericRepository<Registration>, GenericRepository<Registration>>();
            services.AddTransient<IGenericRepository<Group>, GenericRepository<Group>>();
            services.AddTransient<IRegistrationRepository, RegistrationRepository>();
            services.AddControllers();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
```
In this example, we have a generic repository interface `IGenericRepository<T>` and a generic repository implementation `GenericRepository<T>`. We then create a `RegistrationRepository` class that uses the generic repository to implement the `GetRegistrationsByStudentId` and `GetGroupsByIds` methods.

The rest of the code remains the same. When you call the `api/registrations/student/{studentId}` endpoint, the `GetGroupsByStudentId` method will be executed, which will retrieve the open registrations for the given student ID, extract the unique group IDs, and then retrieve the corresponding group objects. The resulting list of group objects will be returned in the response.

Note that this implementation assumes you have a `DbContext` class that provides the database context for the generic repository. You'll need to modify the code to fit your specific database context and entity framework configuration.
